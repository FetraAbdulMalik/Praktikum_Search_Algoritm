{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOQwoikeFHod4xHk7McR4ZD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tslgPLyRkzRX","executionInfo":{"status":"ok","timestamp":1741837008771,"user_tz":-420,"elapsed":26,"user":{"displayName":"fetra abdul malik b","userId":"17220613554845244046"}},"outputId":"72d0c31b-5821-4de5-d563-82fde4de4ee3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hasil penelusuran graf menggunakan BFS:\n","0 1 2 3 "]}],"source":["# BFS algoritma di python\n","\n","import collections\n","\n","#BFS algoritma\n","def bfs(graph, root):\n","\n","    visited, queue = set(), collections.deque([root])\n","    visited.add(root)\n","\n","    while queue:\n","\n","      #dequeue di node dari queue\n","      vertex = queue.popleft()\n","      print(str(vertex) + \" \", end = \"\")\n","\n","      #if not visited,  mark it as visited , and\n","      #enqueue it\n","\n","      for neighbour in graph[vertex]:\n","        if neighbour not in visited:\n","          visited.add(neighbour)\n","          queue.append(neighbour)\n","\n","if __name__ == '__main__':\n","    graph = {0: [1, 2], 1: [2], 2: [3], 3: [1, 2]}\n","    print(\"Hasil penelusuran graf menggunakan BFS:\")\n","    bfs(graph, 0)\n","#"]}]}